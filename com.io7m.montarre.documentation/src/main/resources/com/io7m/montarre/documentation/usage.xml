<?xml version="1.0" encoding="UTF-8" ?>

<Section xmlns="urn:com.io7m.structural:8:0"
         title="Usage"
         xmlns:xi="http://www.w3.org/2001/XInclude">

  <Subsection title="Introduction">
    <Paragraph>
      This section of the documentation describes how to <Term type="term">use</Term> the
      <Term type="package">montarre</Term>
      package whilst attempting to explain as little as possible of exactly how the package
      <Term type="term">works</Term>. The
      <Link target="72b44499-f0cb-4d2a-96dd-ebb02985976c">specification</Link>
      section, on the other hand, goes into detail on exactly how everything works internally.
    </Paragraph>
  </Subsection>

  <Subsection title="Packages">
    <Paragraph>
      In a similar manner to how a
      <LinkExternal target="https://en.wikipedia.org/wiki/JAR_(file_format)">jar</LinkExternal>
      file is simply a
      <LinkExternal target="https://en.wikipedia.org/wiki/Zip_(file_format)">zip</LinkExternal>
      file containing the Java bytecode of an application along with some metadata, a
      <Term type="package">montarre</Term>
      <Term type="term">package</Term>
      is simply a zip file containing the jar files that comprise an application along with detailed metadata that
      provides enough information to allow for easily transforming that package to any number of
      <Term type="term">platform-specific</Term>
      package formats. A
      <Term type="package">montarre</Term>
      package is <Term type="term">platform-independent</Term> and thus contains the superset of all code that the
      application might use on all of the platforms upon which it might run. Assuming that one has a suitable Java VM
      installed, a <Term type="package">montarre</Term> package can simply be unzipped and then run using the
      <Term type="expression">java</Term>
      command
      <LinkFootnote target="51aa5cfb-84ff-4229-a097-e734ee649bb4"/>. This, obviously, is not particularly interesting in
      itself, and isn't really the way
      <Term type="package">montarre</Term>
      packages are intended to be used. The interesting aspect of a <Term type="package">montarre</Term> package is
      that, with no other configuration required, the package can be used to produce a range of
      <Term type="term">native</Term>
      packages and/or executables relevant to the current platform. For example, a user examining the package on Linux
      can use a single invocation of the
      <Term type="command">montarre native create</Term>
      command to produce a Debian
      <Term type="file">.deb</Term>
      package, a Flatpak, and/or a simple application image executable.
    </Paragraph>
    <Paragraph>
      The first step in using <Term type="package">montarre</Term> is to have your build system produce a
      <Term type="package">montarre</Term>
      package as one of the outputs. In general, this will be accomplished with a single invocation of
      the <Link target="f3ab6b7a-7a96-426a-a0d6-fc222ab3c965">Maven Plugin</Link>, but it is also possible to use the
      <Link target="930ccf7e-49e8-4af1-a960-cd78c9788f37">command-line tools</Link>.
    </Paragraph>
  </Subsection>

  <Subsection title="Package Declaration">
    <Paragraph>
      Every <Term type="package">montarre</Term> package contains a <Term type="term">package declaration</Term>.
      A package declaration is an XML file with an extremely strict schema, with almost no optional elements
      <LinkFootnote target="7e312e11-4138-4192-8ebe-eb4ec8ed1d0d"/>. The package declaration serves two purposes:
    </Paragraph>
    <FormalItem title="Package Declaration Purposes">
      <ListUnordered>
        <Item>
          It provides all of the metadata that is used by the tools to produce native packages. For example, the
          metadata contains <Term type="element">Category</Term> elements that are used to categorize applications
          when converting them to Flatpaks.
        </Item>
        <Item>
          It provides a list of all of the files included in the package, along with their cryptographic hashes
          for integrity checks, and type information such as "this file is an icon", "this file is a platform-dependent
          library that is only used on Linux x86_64", and etc.
        </Item>
      </ListUnordered>
    </FormalItem>
    <Paragraph>
      In a <Term type="package">montarre</Term> package, the package declaration is always stored in the
      zip file entry named <Term type="file">META-INF/MONTARRE/PACKAGE.XML</Term>, which is also expected to be
      the first entry in the file. As a concrete example, this is the package declaration taken from the
      <Term type="package">montarre</Term> package itself:
    </Paragraph>
    <FormalItem title="Montarre Package Declaration">
      <Verbatim>
        <xi:include href="package-example.txt" parse="text"/>
      </Verbatim>
    </FormalItem>
    <Paragraph>
      You are not usually expected to write a package declaration by hand. Instead, the
      <Link target="38fc9592-0426-4312-9ee3-4b7619667b6f">Maven plugin</Link> can be used to collect all of the
      (transitive) dependencies of a project, generate an appropriate manifest, and fill in all of the package
      declaration information that can be inferred from the Maven POM alone. Anything that cannot be inferred from
      the POM must be included as configuration parameters to the plugin.
    </Paragraph>
  </Subsection>

  <Subsection title="Maven Plugin" id="38fc9592-0426-4312-9ee3-4b7619667b6f">
    <Paragraph>
      To use the Maven plugin, simply add a plugin execution to the main module in your project:
    </Paragraph>
    <FormalItem title="Maven Plugin Execution">
      <Verbatim>
        <xi:include href="maven.txt"
                    parse="text"/>
      </Verbatim>
    </FormalItem>
    <Paragraph>
      Many of the parameters are optional and are inferred from the hosting Maven project if not specified. All
      parameters are documented in the
      <Link target="f3ab6b7a-7a96-426a-a0d6-fc222ab3c965">Maven Plugin</Link>
      documentation.
    </Paragraph>
    <Paragraph>
      Upon running the build, a <Term type="package">montarre</Term> package will be produced and attached to
      the build. Look for a file with the suffix <Term type="file">.mpk</Term>:
    </Paragraph>
    <FormalItem title="mpk File">
      <Verbatim><![CDATA[$ ls com.io7m.montarre.distribution/target/*.mpk
com.io7m.montarre.distribution/target/com.io7m.montarre.distribution-0.0.1-SNAPSHOT.mpk
]]></Verbatim>
    </FormalItem>
  </Subsection>

  <Subsection title="Command-Line Native Packages" id="5b286674-bf9b-4176-ae51-c70adfaae758">
    <Paragraph>
      Assuming that you have an existing <Term type="package">montarre</Term> package (we'll pretend that it's
      called <Term type="file">montarre.mpk</Term>), it's possible to produce every type of native package supported
      by the current system with a single command. Assuming that the current system is Linux, and we're running on
      the <Term type="constant">x86_64</Term> hardware architecture, we need to tell the command-line where to get
      a suitable Java runtime that can be used as the basis for a native package. At the time of writing, there seems
      to be little reason to use anything other than
      <LinkExternal target="https://adoptium.net/">Eclipse Adoptium</LinkExternal> as they produce TCK certified
      runtimes for the widest range of platforms. We call the
      <Link target="63ea3d1a-5fc8-302e-8983-66910a4868fc">native create</Link> subcommand of the command-line
      <Term type="package">montarre</Term> tool, passing it a couple of temporary directories that will be used
      for temporary files and the outputs of packaging, and a link to a suitable
      Temurin JRE:
    </Paragraph>
    <FormalItem title="Native Creation">
      <Verbatim><![CDATA[$ montarre native create \
  --package montarre.mpk \
  --work-directory /tmp/work0 \
  --output-directory /tmp/work0-output \
  --java-runtime-download-uri https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.4%2B7/OpenJDK21U-jdk_x64_linux_hotspot_21.0.4_7.tar.gz \
  --java-runtime-sha256 51fb4d03a4429c39d397d3a03a779077159317616550e4e71624c9843083e7b9 \
  --java-runtime-format TAR_GZ
]]></Verbatim>
    </FormalItem>
    <Paragraph>
      The output of the command is a set of packages in various formats:
    </Paragraph>
    <FormalItem title="Native Creation Outputs">
      <Verbatim><![CDATA[$ ls -alF /tmp/work0-output
total 187632
drwxr-xr-x  2 montarre   montarre        120 Oct 15 12:13 ./
drwxrwxrwt 30 root       root            880 Oct 16 17:37 ../
-rw-r--r--  1 montarre   montarre    4138851 Oct 15 12:13 com.io7m.montarre-0.0.1-SNAPSHOT-any.tgz
-rw-r--r--  1 montarre   montarre   81923503 Oct 15 12:11 com.io7m.montarre-0.0.1-SNAPSHOT-x86_64-linux.tgz
-rw-r--r--  1 montarre   montarre   52665048 Oct 15 12:13 com.io7m.montarre.flatpak
-rw-r--r--  1 montarre   montarre   53400220 Oct 15 12:11 montarre-0.0.1-SNAPSHOT-x86_64-linux.deb
]]></Verbatim>
    </FormalItem>
    <Paragraph>
      We can see that the process produced a
      <Link target="093a873f-4488-495b-b154-f822934edb98">Debian package</Link>
      named
      <Term type="file">montarre-0.0.1-SNAPSHOT-x86_64-linux.deb</Term>,
      an
      <Link target="284bfca8-7cee-4bc0-a654-af8582e1906d">app-image</Link>
      named
      <Term type="file">com.io7m.montarre-0.0.1-SNAPSHOT-x86_64-linux.tgz</Term>,
      a
      <Link target="a69aad53-8567-4ded-8b3c-cfe4a50712c4">shell distribution</Link>
      named
      <Term type="file">com.io7m.montarre-0.0.1-SNAPSHOT-any.tgz</Term>,
      and a
      <Link target="ded1ac99-9556-4ef9-b01f-3f689a164733">Flatpak</Link>
      named
      <Term type="file">com.io7m.montarre.flatpak</Term>.
    </Paragraph>
    <Paragraph>
      Had this command been run on Windows, the output would likely have included an
      <Link target="c45b5bb5-e7a7-4b7d-90f0-7b08869c6de3">MSI</Link>
      installer.
    </Paragraph>
  </Subsection>

  <Footnote id="51aa5cfb-84ff-4229-a097-e734ee649bb4">
    It might be necessary to adjust the module path to account for the fact that the package might have included, for
    example, native libraries that should not be placed on the module path on some platforms. The included package
    metadata contains all of the information required to make these decisions. Most applications do not include native
    libraries, so the point generally stands.
  </Footnote>

  <Footnote id="7e312e11-4138-4192-8ebe-eb4ec8ed1d0d">
    The schema is so strict, in fact, that simply creating a <Term type="element">Package</Term> element in the
    correct <Term type="constant">urn:com.io7m.montarre.package:1</Term> namespace in any modern IDE will automatically
    create and fill in most of the elements!
  </Footnote>

</Section>

<?xml version="1.0" encoding="UTF-8" ?>

<Section title="Overview"
         xmlns="urn:com.io7m.structural:8:0">

  <Subsection title="Introduction">
    <Paragraph>
      This section of the documentation describes how to <Term type="term">use</Term> the
      <Term type="package">montarre</Term>
      package whilst attempting to explain as little as possible of exactly how the package
      <Term type="term">works</Term>. The
      <Link target="72b44499-f0cb-4d2a-96dd-ebb02985976c">specification</Link>
      section, on the other hand, goes into detail on how exactly everything works internally.
    </Paragraph>
  </Subsection>

  <Subsection title="Packages">
    <Paragraph>
      In a similar manner to how a
      <LinkExternal target="https://en.wikipedia.org/wiki/JAR_(file_format)">jar</LinkExternal>
      file is simply a
      <LinkExternal target="https://en.wikipedia.org/wiki/Zip_(file_format)">zip</LinkExternal>
      file containing the Java bytecode of an application along with some metadata, a
      <Term type="package">montarre</Term>
      <Term type="term">package</Term>
      is simply a zip file containing the jar files that comprise an application along with detailed metadata that
      provides enough information to allow for easily transforming that package to any number of
      <Term type="term">platform-specific</Term>
      package formats. A
      <Term type="package">montarre</Term>
      package is <Term type="term">platform-independent</Term> and thus contains the superset of all code that the
      application might use on all of the platforms upon which it might run. Assuming that one has a suitable Java VM
      installed, a <Term type="package">montarre</Term> package can simply be unzipped and then run using the
      <Term type="expression">java</Term>
      command
      <LinkFootnote target="51aa5cfb-84ff-4229-a097-e734ee649bb4"/>. This, obviously, is not particularly interesting in
      itself, and isn't really the way
      <Term type="package">montarre</Term>
      packages are intended to be used. The interesting aspect of a <Term type="package">montarre</Term> package is
      that, with no other configuration required, the package can be used to produce a range of
      <Term type="term">native</Term>
      packages and/or executables relevant to the current platform. For example, a user examining the package on Linux
      can use a single invocation of the
      <Term type="command">montarre native create</Term>
      command to produce a Debian
      <Term type="file">.deb</Term>
      package, a Flatpak, and/or a simple application image executable.
    </Paragraph>
    <Paragraph>
      The first step in using <Term type="package">montarre</Term> is to have your build system produce
      a <Term type="package">montarre</Term> package as one of the outputs. In general, this will be accomplished
      with a single invocation of the <Link target="f3ab6b7a-7a96-426a-a0d6-fc222ab3c965">Maven Plugin</Link>,
      but it is also possible to use the
      <Link target="772a158a-4c40-482b-8f03-0d89c7d3312e">command-line tools</Link>.
    </Paragraph>
  </Subsection>

  <Footnote id="51aa5cfb-84ff-4229-a097-e734ee649bb4">
    It might be necessary to adjust the module path to account for the fact that the package might have included, for
    example, native libraries that should not be placed on the module path on some platforms. The included package
    metadata contains all of the information required to make these decisions. Most applications do not include native
    libraries, so the point generally stands.
  </Footnote>

</Section>

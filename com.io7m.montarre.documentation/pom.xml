<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.io7m.montarre</groupId>
    <artifactId>com.io7m.montarre</artifactId>
    <version>0.0.6-SNAPSHOT</version>
  </parent>
  <artifactId>com.io7m.montarre.documentation</artifactId>

  <packaging>jar</packaging>
  <name>com.io7m.montarre.documentation</name>
  <description>Application packaging tools (Documentation).</description>
  <url>https://www.io7m.com/software/montarre/</url>

  <properties>
    <checkstyle.skip>true</checkstyle.skip>
    <mdep.analyze.skip>true</mdep.analyze.skip>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>com.io7m.montarre.cmdline</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>com.io7m.montarre.schema</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>com.io7m.primogenitor</groupId>
      <artifactId>com.io7m.primogenitor.support</artifactId>
    </dependency>

    <dependency>
      <groupId>org.immutables</groupId>
      <artifactId>value</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.io7m.immutables-style</groupId>
      <artifactId>com.io7m.immutables-style</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.annotation.bundle</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.annotation.versioning</artifactId>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>src/main/resources-unfiltered</directory>
        <filtering>false</filtering>
      </resource>
    </resources>

    <plugins>
      <!-- Copy documentation resources into build directory -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-documentation-resources</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/documentation/</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/com/io7m/montarre/documentation/</directory>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>src/main/resources-unfiltered/com/io7m/montarre/documentation/</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>copy-documentation-resources-epub</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/epub/</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/resources/com/io7m/montarre/documentation/</directory>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>src/main/resources-unfiltered/com/io7m/montarre/documentation/</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>copy-documentation-coq</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/documentation/Montarre/</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/coq/Montarre/</directory>
                  <filtering>false</filtering>
                  <includes>
                    <include>**/*.v</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>copy-epub-coq</id>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/epub/Montarre/</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/coq/Montarre/</directory>
                  <filtering>false</filtering>
                  <includes>
                    <include>**/*.v</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <id>copy-generated-epub</id>
            <phase>site</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.parent.build.directory}/minisite/documentation/</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/epub/</directory>
                  <includes>
                    <include>documentation.epub</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <!-- Unpack sources of dependencies -->
          <execution>
            <id>unpack-sources</id>
            <phase>package</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludes>module-info.java</excludes>
              <includeGroupIds>${project.groupId}</includeGroupIds>
              <classifier>sources</classifier>
              <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
              <outputDirectory>${project.build.directory}/javadoc-sources</outputDirectory>
            </configuration>
          </execution>

          <!-- Unpack schemas -->
          <execution>
            <id>unpack-schemas</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includes>**/*.xsd</includes>
              <includeGroupIds>${project.groupId}</includeGroupIds>
              <includeArtifactIds>com.io7m.montarre.schema</includeArtifactIds>
              <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
              <outputDirectory>${project.build.directory}/documentation/</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>unpack-schemas-epub</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <includes>**/*.xsd</includes>
              <includeGroupIds>${project.groupId}</includeGroupIds>
              <includeArtifactIds>com.io7m.montarre.schema</includeArtifactIds>
              <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
              <outputDirectory>${project.build.directory}/epub/</outputDirectory>
            </configuration>
          </execution>

          <execution>
            <id>make-classpath</id>
            <phase>package</phase>
            <goals>
              <goal>build-classpath</goal>
            </goals>
            <configuration>
              <outputFile>${project.build.directory}/javadoc-classpath</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <!-- Javadoc handling -->
          <execution>
            <id>javadoc</id>
            <goals>
              <goal>java</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <mainClass>com.io7m.primogenitor.support.TrivialJavadoc</mainClass>
              <arguments>
                <argument>${project.build.directory}/javadoc-sources</argument>
                <argument>${project.build.directory}/javadoc-classpath</argument>
                <argument>${project.build.directory}/documentation/apidocs</argument>
                <argument>${project.build.directory}/javadoc-log.txt</argument>
                <argument>${project.build.directory}/javadoc-options</argument>
              </arguments>
            </configuration>
          </execution>

          <execution>
            <id>excerpts-documentation</id>
            <goals>
              <goal>java</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <mainClass>com.io7m.montarre.documentation.Excerpts</mainClass>
              <arguments>
                <argument>${project.basedir}/src/main/coq</argument>
                <argument>${project.basedir}/src/main/coq/excerpts.txt</argument>
                <argument>${project.build.directory}/documentation/</argument>
              </arguments>
            </configuration>
          </execution>

          <execution>
            <id>excerpts-epub</id>
            <goals>
              <goal>java</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <mainClass>com.io7m.montarre.documentation.Excerpts</mainClass>
              <arguments>
                <argument>${project.basedir}/src/main/coq</argument>
                <argument>${project.basedir}/src/main/coq/excerpts.txt</argument>
                <argument>${project.build.directory}/epub/</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Generate documentation in various formats. -->
      <plugin>
        <groupId>com.io7m.xstructural</groupId>
        <artifactId>com.io7m.xstructural.maven_plugin</artifactId>
        <version>${com.io7m.xstructural.version}</version>
        <executions>
          <execution>
            <id>xhtml-single</id>
            <phase>package</phase>
            <goals>
              <goal>xhtml-single</goal>
            </goals>
            <configuration>
              <brandingFile>${project.build.directory}/documentation/brand.xml</brandingFile>
              <sourceFile>${project.build.directory}/documentation/main.xml</sourceFile>
              <outputDirectory>${project.build.directory}/documentation</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>xhtml-multi</id>
            <phase>package</phase>
            <goals>
              <goal>xhtml-multi</goal>
            </goals>
            <configuration>
              <brandingFile>${project.build.directory}/documentation/brand.xml</brandingFile>
              <sourceFile>${project.build.directory}/documentation/main.xml</sourceFile>
              <outputDirectory>${project.build.directory}/documentation</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>epub</id>
            <phase>package</phase>
            <goals>
              <goal>epub</goal>
            </goals>
            <configuration>
              <brandingFile>${project.build.directory}/documentation/brand.xml</brandingFile>
              <sourceFile>${project.build.directory}/documentation/main.xml</sourceFile>
              <outputDirectory>${project.build.directory}/epub</outputDirectory>
              <outputFileName>documentation.epub</outputFileName>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Produce documentation archive -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptors>
            <descriptor>src/main/assembly/documentation.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Unpack the documentation archive to the parent's generated site minisite directory. -->
      <!-- This is arguably abusive, but there appears to be no other way to achieve it. -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>truezip-maven-plugin</artifactId>
        <inherited>false</inherited>
        <executions>
          <execution>
            <id>copy-site-documentation</id>
            <goals>
              <goal>copy</goal>
            </goals>
            <phase>site</phase>
            <configuration>
              <verbose>true</verbose>
              <fileset>
                <directory>
                  ${project.build.directory}/${project.name}-${project.version}.zip/${project.name}-${project.version}/
                </directory>
                <outputDirectory>${project.parent.build.directory}/minisite/documentation/</outputDirectory>
              </fileset>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
